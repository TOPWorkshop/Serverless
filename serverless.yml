service: topws-serverless

plugins:
  - serverless-webpack
  - serverless-finch

custom:
  stage: ${opt:stage, self:provider.stage}
  webpack: ./config/webpack/serverless.js
  webpackIncludeModules:
      packagePath: './package.json'
  client:
    bucketName: ${self:service}-${self:custom.stage}-static
    distributionFolder: static-dist
  authorizer:
    facebook:
      name: authorizerFacebook
      type: TOKEN
      resultTtlInSeconds: 0
      identitySource: method.request.header.Authorization
      identityValidationExpression: Bearer (.*)
  sns:
    telegram: ${self:service}-telegram

provider:
  name: aws
  runtime: nodejs6.10
  region: eu-west-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:UpdateItem
        - dynamodb:DescribeTable
      Resource:
        - { "Fn::GetAtt": ["TOPWSUsers", "Arn"] }
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:DescribeTable
      Resource:
        - { "Fn::GetAtt": ["TOPWSConfig", "Arn"] }
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource:
        - { "Ref": "TOPWSTelegram" }
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
  environment:
    TABLE_USERS: { "Ref": "TOPWSUsers" }
    TABLE_CONFIGURATION: { "Ref": "TOPWSConfig" }
    SNS_TELEGRAM: { "Ref": "TOPWSTelegram" }
    LAMBDA_SCRAPE: ${self:service}-${opt:stage, self:provider.stage}-user-scrape

functions:
  user-list:
    handler: lambda/online.list
    events:
      - http:
          path: users
          method: get
          cors: true

  user-vote:
    handler: lambda/online.vote
    events:
      - http:
          path: users/{userId}/vote
          method: put
          cors: true
          request:
            parameters:
              paths:
                userId: true

  user-scrape:
    handler: lambda/batch.scrape

  config-get:
    handler: lambda/configuration.get
    events:
      - http:
          path: config/{configKey}
          method: get
          authorizer: ${self:custom.authorizer.facebook}
          request:
            parameters:
              paths:
                configKey: true

  config-list:
    handler: lambda/configuration.list
    events:
      - http:
          path: config
          method: get
          authorizer: ${self:custom.authorizer.facebook}

  config-set:
    handler: lambda/configuration.set
    events:
      - http:
          path: config
          method: post
          cors: true
          authorizer: ${self:custom.authorizer.facebook}

  authorizerFacebook:
    handler: lambda/authorizer.facebook

  telegram-handleMessage:
    handler: lambda/telegram.handleMessage
    events:
     - http:
        path: telegram
        method: post

  dispatchToTelegram:
    handler: lambda/telegram.forwardSNS
    events:
      - sns:
          arn:
            Fn::Join:
              - ""
              - - "arn:aws:sns:"
                - Ref: "AWS::Region"
                - ":"
                - Ref: "AWS::AccountId"
                - ":"
                - ${self:custom.sns.telegram}
          topicName: ${self:custom.sns.telegram}

  dispatchLogs:
    handler: lambda/logs.handle
    events:
      - cloudwatchLog:
          logGroup: /aws/lambda
          filter: /aws/lambda/topws-serverless-${self:custom.stage}-dispatchLogs

resources:
  Resources:
    TOPWSTelegram:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Telegram messages pipeline
        TopicName: ${self:custom.sns.telegram}
    TOPWSUsers:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    TOPWSConfig:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
